{
  "rules": [
    {
      "type": "structure",
      "id": "test_by_processor",
      "severity": "critical",
      "brief": "There must be an unit test class per processor",
      "description": "There must be an unit test class per processor",
      "section": "Directory Structure",
      "assert": "src/test/java/${connector_package}/automation/functional/${connector_processor}TestCases.java"
    },
    {
      "type": "structure",
      "id": "readme",
      "severity": "critical",
      "brief": "README.md must be part of the connector project",
      "description": "README.md must be part of the connector project. Refer to the certification for the template file",
      "section": "Directory Structure",
      "assert": "README.md"
    },
    {
      "type": "source.pom",
      "id": "ctf_version_overwritten",
      "severity": "critical",
      "brief": "Connector test framework must not be overwritten",
      "description": "Connectors testing framework must not be overwritten. This can produce unexpected errors once the DevKit version is migrated. Remove the property 'connector.test.version' from the pom.xml",
      "section": "Best Practices",
      "assert": "not(/pom:project/pom:properties/pom:connector.test.version/node())"
    },
    {
      "type": "source.pom",
      "id": "devkit_version",
      "severity": "critical",
      "brief": "DevKit 3.7.1 should be used",
      "description": "DevKit 3.7.1 is the supported version for the certification",
      "section": "Best Practices",
      "assert": "/pom:project/pom:parent/pom:version[text()='3.7.1']"
    },
    {
      "type": "source.pom",
      "id": "dist_management_premium",
      "severity": "critical",
      "brief": "pom.xml distributionManagement must be properly configured",
      "description": "???",
      "section": "???",
      "accept": "/pom:project/pom:properties/pom:category[text()='Premium' or text()='Select']",
      "assert": "/pom:project/pom:distributionManagement/pom:repository/pom:id[text()='mule-ee-releases'] and /pom:project/pom:distributionManagement/pom:repository/pom:url[text()='https://repository-master.mulesoft.org/nexus/content/repositories/releases-ee/']"
    },
    {
      "type": "source.pom",
      "id": "dist_management_premium_snapshot",
      "severity": "critical",
      "brief": "pom.xml distributionManagement must be properly configured",
      "description": "???",
      "section": "???",
      "accept": "/pom:project/pom:properties/pom:category[text()='Premium' or text()='Select']",
      "assert": "/pom:project/pom:distributionManagement/pom:snapshotRepository/pom:id[text()='mule-ee-snapshots'] and /pom:project/pom:distributionManagement/pom:snapshotRepository/pom:url[text()='https://repository-master.mulesoft.org/nexus/content/repositories/ci-snapshots/']"
    },
    {
      "type": "source.pom",
      "id": "dist_management_other",
      "severity": "critical",
      "brief": "pom.xml distributionManagement must be properly configured",
      "description": "???",
      "section": "???",
      "accept": "not(/pom:project/pom:properties/pom:category[text()='Premium' or text()='Select'])",
      "assert": "/pom:project/pom:distributionManagement/pom:repository/pom:id[text()='mulesoft-releases'] and /pom:project/pom:distributionManagement/pom:repository/pom:url[text()='http://repository-master.mulesoft.org/releases/']"
    },
    {
      "type": "source.pom",
      "id": "dist_management_other_snapshot",
      "severity": "critical",
      "brief": "pom.xml distributionManagement must be properly configured",
      "description": "???",
      "section": "???",
      "accept": "not(/pom:project/pom:properties/pom:category[text()='Premium' or text()='Select'])",
      "assert": "/pom:project/pom:distributionManagement/pom:snapshotRepository/pom:id[text()='mulesoft-snapshots'] and /pom:project/pom:distributionManagement/pom:snapshotRepository/pom:url[text()='http://repository-master.mulesoft.org/snapshots/']"
    },
    {
      "type": "source.java",
      "id": "default_payload",
      "severity": "major",
      "brief": "@Default(\"#[payload]\") usage best practices",
      "description": "@Default(\"#[payload]\") should be used to mark complex type mandatory parameter",
      "section": "Best Practices",
      "accept": ".+/.+Connector.java$;org.mule.api.annotations.Connector",
      "assert": "org.mule.tools.devkit.sonar.rule.verifier.java.DefaultPayloadVerifier"
    },
    {
      "type": "source.java",
      "id": "processor_params",
      "severity": "major",
      "brief": "More than one mandatory parameters in processor",
      "description": "It's strongly recommended that all mandatory parameters be defined as part of the payload. Consider creating a complex object as grouping all the parameters",
      "section": "Best Practices",
      "accept": ".+/.+Connector.java$;org.mule.api.annotations.Connector",
      "assert": "org.mule.tools.devkit.sonar.rule.verifier.java.ProcessorParameterVerifier"
    },
    {
      "type": "source.java",
      "id": "processor_params_quantity",
      "severity": "major",
      "brief": "Many parameters in processor",
      "description": "It's strongly recommended that all optional parameters are grouped inside a separate POJO class.",
      "section": "Best Practices",
      "accept": ".+/.+Connector.java$;org.mule.api.annotations.Connector",
      "assert": "org.mule.tools.devkit.sonar.rule.verifier.java.ProcessorParameterQuantityVerifier"
    },
    {
      "type": "source.java",
      "id": "processor_params_refonly",
      "severity": "major",
      "brief": "Complex types should be marked with @RefOnly",
      "description": "Complex types should be marked with @RefOnly",
      "section": "Best Practices",
      "accept": ".+/.+Connector.java$;org.mule.api.annotations.Connector",
      "assert": "org.mule.tools.devkit.sonar.rule.verifier.java.RefOnlyParameterVerifier"
    },
    {
      "type": "source.java",
      "id": "processor_exception",
      "severity": "major",
      "brief": "Redundant exception names",
      "description": "Don't use the word 'Connector' to define the name of custom exceptions, e.g: <MyAwesomeConnectoException> should be <MyAwesomeException> ",
      "section": "Best Practices",
      "accept": ".+/.+Connector.java$;org.mule.api.annotations.Connector",
      "assert": "org.mule.tools.devkit.sonar.rule.verifier.java.ProcessorExceptionVerifier"
    },
    {
      "type": "source.java",
      "id": "connector_category",
      "severity": "critical",
      "brief": "Connector category must contain proper @RequiresEntitlement and @RequiresEnterpriseLicense",
      "description": "",
      "section": "",
      "accept": ".+/.+Connector.java$;org.mule.api.annotations.Connector",
      "assert": "org.mule.tools.devkit.sonar.rule.verifier.java.LicenseByCategoryVerifier"
    },
    {
      "type": "source.java",
      "id": "transform_resolver",
      "severity": "info",
      "brief": "@TransformerResolver should only transform connector domain model entities",
      "description": "@TransformerResolver applied globally to all the flows. Due to that it's important that registered transformation are from/to connector model objects",
      "section": "Best Practices",
      "accept": ".+/.+Connector.java$;org.mule.api.annotations.Connector",
      "assert": "org.mule.tools.devkit.sonar.rule.verifier.java.TransformerResolverVerifier"
    },
    {
      "type": "source.java",
      "id": "restcall_reprecated",
      "severity": "critical",
      "brief": "@RestCall support is deprecated",
      "description": "@RestCall support has been deprecated in favor of RAML. Consider migrate your connector to Rest Connect",
      "section": "Best Practices",
      "accept": ".+/.+Connector.java$;org.mule.api.annotations.Connector",
      "assert": "org.mule.tools.devkit.sonar.rule.verifier.java.RestCallIsDeprecatedVerifier"
    },
    {
      "type": "source.java",
      "id": "metadata_category",
      "severity": "major",
      "brief": "@MetadataCategory 'friendlyName' must follow a convention",
      "description": "???",
      "section": "???",
      "accept": ".+/.+.\\.java$;org.mule.api.annotations.components.MetaDataCategory",
      "assert": "org.mule.tools.devkit.sonar.rule.verifier.java.MetadataCategoryVerifier"
    },
    {
      "type": "source.xml",
      "severity": "minor",
      "id": "sample",
      "brief": "",
      "description": "",
      "section": "",
      "accept": ".+/some.xml$",
      "assert": "boolean(/*[local-name() = 'project']/*[local-name() = 'properties']/*[local-name() = 'connector.test.version']/text())"
    },
    {
      "type": "structure",
      "id": "Test Data",
      "severity": "critical",
      "brief": "There must be a TestDataBuilder.java file to generate all necessary test data for every single functional test",
      "description": "Test data must be contained within a org.mule.modules.<connector-project>.automation.functional.TestDataBuilder.java class",
      "section": "Directory Structure",
      "accept": "src/test/java$",
      "assert": "src/test/java/${connector_package}/automation/functional/TestDataBuilder.java"
    },
     {
      "type": "structure",
      "id": "Test Resources",
      "severity": "critical",
      "brief": "There must be a Test Resources folder, src/test/resources",
      "description": "There must be a Test Resources folder, src/test/resources",
      "section": "Directory Structure",
      "accept": "src/test/resources/$",      
      "assert": "src/test/resources"
    },
    {
      "type": "structure",
      "id": "Test Suites Location",
      "severity": "critical",
      "brief": "For Test Suites there must be a folder named runner",
      "description": "For Test Suites there must be a folder named runner",
      "section": "Directory Structure",
      "accept": "src/test/java/${connector_package}/automation/runner/$",
      "assert": "src/test/java/${connector_package}/automation/runner"
    },            
    {
      "type": "structure",
      "id": "System Test Cases Location",
      "severity": "critical",
      "brief": "For System Test Cases there must be a folder named system",
      "description": "For System Test Cases there must be a folder named system",
      "section": "Directory Structure",            
      "accept": "src/test/java/${connector_package}/automation/system/$",
      "assert": "src/test/java/${connector_package}/automation/system"   
    }          
  ]
}
